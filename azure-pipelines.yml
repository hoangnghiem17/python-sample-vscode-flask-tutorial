# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# When manually running the pipeline, you can select whether it
# succeeds or fails.
parameters:
- name: succeed
  displayName: Succeed or fail
  type: boolean
  default: false

trigger:
- main

pool:
  vmImage: windows-latest

strategy:
  matrix:
    Python36:
      python.version: '3.6'
    Python37:
      python.version: '3.7'

jobs:
- job: BuildAndTest
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: |
      pip install pytest pytest-azurepipelines
      pytest
    displayName: 'pytest'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: "JaCoCo"
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/site/jacoco/jacoco.xml"
      reportDirectory: "$(System.DefaultWorkingDirectory)/**/site/jacoco"
      failIfCoverageEmpty: true

  - script: |
      if [ $(succeed) = false ]; then
        echo "Failing the pipeline as per the succeed parameter."
        exit 1
      fi
    displayName: 'Conditional fail step'

- job: ErrorHandler
  dependsOn: BuildAndTest
  condition: failed()
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        az boards work-item create \
          --title "Build $(Build.BuildNumber) failed" \
          --type bug \
          --org $(System.TeamFoundationCollectionUri) \
          --project $(System.TeamProject)
    env: 
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    displayName: 'Create work item on failure'
